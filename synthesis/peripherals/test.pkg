// This package holds all of the tests that can be executed by the
// testrunner

package Test;
   import video_types::*;
   // enum of log level types, currently only enabled and disabled
   typedef enum {LOG_DISABLED, LOG_ENABLED} LogLevel;

   // the abstract class all tests are derived from
   virtual class BaseTest;
      // handles for the DUT interfaces. Only signals in these two
      // interfaces can be used by a test
      virtual   DataBus db;
      virtual   Control cntrl;
      // current log level, accross all tests
      static LogLevel DebugLevel;
      // print a string as debug data. wrap in $psprintf if you want
      // variable substition
      task DebugPrint (string msg);
         if (DebugLevel == LOG_ENABLED)
           $display("%s:  %s", this.getName(), msg);
      endtask // DebugPrint

      // override to set the name for your test
      virtual function string getName();
         getName = "UnknownTest";
      endfunction // getName

      // wait for the whizzgraphics to generate an image
      task waitForImage(output bit Status);
         fork : tmpfork
            begin 
               repeat(100000)@(posedge db.clk); 
               Status = 0;
               disable tmpfork; 
            end
            begin 
               wait(!cntrl.renderComplete);
               wait(cntrl.renderComplete);
               Status = 1;
               disable tmpfork; 
            end
         join
      endtask


      function Tile genTile(string pixmap[NUM_ROWS]);
         string zero;
         int    code0, tmpchar;
         bit [0:ROW_SIZE-1] lowbit,hibit;
         zero = "0";
         code0 = zero.getc(0);
         for (int r = 0; r < NUM_ROWS; r++) begin
            lowbit = 0;
            hibit = 0;
            for (int p = 0; p < ROW_SIZE; p++) begin
               tmpchar = pixmap[r].getc(p);
               tmpchar -= code0;
               assert(tmpchar >= 0 && tmpchar < 4);
               {genTile.rows[r][p], genTile.rows[r][p + ROW_SIZE]} = tmpchar;
            end
         end
      endfunction
      
      task writeTile(input int tilenum, Tile t);
         bit [0:ROW_SIZE-1] lowbit,hibit;
         assert (tilenum < NUM_TILES && tilenum >= 0);
         for (int r = 0; r < NUM_ROWS; r++) begin
            lowbit = 0;
            hibit = 0;
            for (int p = 0; p < ROW_SIZE; p++) begin
               hibit[p] = t.rows[r][p];
               lowbit[p] = t.rows[r][p + ROW_SIZE];
            end

            db.write(lowbit, VRAM_TILES_ADDR + 16*tilenum + 2*r);
            db.write(hibit, VRAM_TILES_ADDR + 16*tilenum + 2*r + 1);
         end
      endtask
      
      
      // override to have your test do something
      pure virtual task runTest(output int numPassed, int numFailed);
   
    endclass // BaseTest

   // include the tests naow.
   // Each test's class must be included here
   include "whizzgraphics_tb.sv";
   include "whizzgraphics_mem_tb.sv";
   include "vblank_tb.sv";
   include "tile_tb.sv";
endpackage
